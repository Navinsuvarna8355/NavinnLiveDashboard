# app.py : рдСрдкреНрд╢рди рдкреНрд░реАрдорд┐рдпрдо рдбрд┐рдХреЗ рдмрд╛рдпрд╕ рдПрдирд╛рд▓рд┐рдЯрд┐рдХреНрд╕ рдПрд╡рдВ рдЯреНрд░реЗрдбрд┐рдВрдЧ рдбреИрд╢рдмреЛрд░реНрдб (рд╣рд┐рдВрджреА рдореЗрдВ)
import streamlit as st
import pandas as pd
import numpy as np
import requests
from datetime import datetime, timedelta
import plotly.graph_objs as go
from streamlit_autorefresh import st_autorefresh  # Auto refresh рдХреЗ рд▓рд┐рдП
# pnsea рд▓рд╛рдЗрдмреНрд░реЗрд░реА рдЗрдВрдбреЗрдХреНрд╕ рдСрдкреНрд╢рди рдбреЗрдЯрд╛ рдХреЗ рд▓рд┐рдП
try:
    from pnsea import NSE
except ImportError:
    NSE = None  # рдЕрдЧрд░ рд▓рд╛рдЗрдмреНрд░реЗрд░реА рди рдорд┐рд▓реЗ рддреЛ alternate fetch рдпреВрдЬрд╝ рдХрд░реЗрдВ

# --------------------------------------
# Streamlit Page Config рдФрд░ Title
st.set_page_config(page_title="CE/PE Decay Bias Analytics (рд╣рд┐рдВрджреА)", layout='wide')
st.markdown("## ЁЯУК рдСрдкреНрд╢рди рдкреНрд░реАрдорд┐рдпрдо рдбрд┐рдХреЗ рдмрд╛рдпрд╕ рдПрдирд╛рд▓рд┐рдЯрд┐рдХреНрд╕ (рдирд┐рдлреНрдЯреА/рдмреИрдВрдХ рдирд┐рдлреНрдЯреА/рд╕реЗрдВрд╕реЗрдХреНрд╕)", unsafe_allow_html=True)
st.caption("**рд╣рд┐рдВрджреА рдореЗрдВ рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢ рдПрд╡рдВ рд╕рднреА рд╕реНрдЯреНрд░реЗрдЯреЗрдЬреА рд╕реБрдЭрд╛рд╡**")

# --------------------------------------
# Sidebar - рдпреВрдЬрд░ рдЗрдирдкреБрдЯреНрд╕
indices = ['NIFTY', 'BANKNIFTY', 'SENSEX']
symbol = st.sidebar.selectbox('рдЗрдВрдбреЗрдХреНрд╕ рдЪреБрдиреЗрдВ', indices, index=0)
refresh_in_sec = st.sidebar.slider('рд▓рд╛рдЗрд╡ рд░рд┐рдлреНрд░реЗрд╢ рдЕрдВрддрд░рд╛рд▓ (рд╕реЗрдХрдВрдб рдореЗрдВ)', 15, 300, 60)
expiry_date = st.sidebar.text_input('Expiry Date (DD-MMM-YYYY):', '')  # рдСрдЯреЛ-рдлрд┐рд▓ рдпрд╛ рдпреВрдЬрд░ рдбрд╛рд▓реЗрдВ
decay_threshold = st.sidebar.slider('Decay Bias Threshold (%)', 5, 30, 12)
st.sidebar.markdown("---")

#---------------------------------------
# Auto-refresh enable (User interval)
st_autorefresh(interval=refresh_in_sec*1000, key="data_refresh")

#---------------------------------------
# Option Chain Data Fetch Function (Cache with expiry 3 min)
@st.cache_data(ttl=180)
def fetch_option_chain(symbol, expiry=None):
    """рдСрдкреНрд╢рди рдЪреЗрди рд▓рд╛рдЗрд╡ рдбреЗрдЯрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ (pnsea рдкреНрд░рд╛рдердорд┐рдХ, рдирд╣реАрдВ рддреЛ Requests Scrape)"""
    if NSE:
        nse = NSE()
        if expiry:
            try:
                data = nse.options.option_chain(symbol, expiry_date=expiry)[0]
                return data['records']['data'] if 'records' in data else data
            except Exception:
                pass  # рдиреАрдЪреЗ рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдореЗрдердб рдкрд░ fallback рдХрд░реЗрдВ
    # Alternate - Direct NSE API
    url_map = {
        "NIFTY": "https://www.nseindia.com/api/option-chain-indices?symbol=NIFTY",
        "BANKNIFTY": "https://www.nseindia.com/api/option-chain-indices?symbol=BANKNIFTY",
        "SENSEX": "https://www.nseindia.com/api/option-chain-equities?symbol=SENSEX"
    }
    url = url_map.get(symbol)
    headers = {
        "User-Agent": "Mozilla/5.0",
        "Accept-Language": "en-US,en;q=0.9",
        "Referer": "https://www.nseindia.com/"
    }
    try:
        sess = requests.Session()
        # Cookie рдкреНрд░реА-рдлреЗрдЪрд┐рдВрдЧ (NSE security protocol)
        _ = sess.get("https://www.nseindia.com/option-chain", headers=headers, timeout=5)
        response = sess.get(url, headers=headers, timeout=8)
        if response.status_code == 200:
            data = response.json()
            raw = data['records']['data']
            # Expiry filter
            if expiry:
                raw = [item for item in raw if item.get('expiryDate', '') == expiry]
            return raw
    except Exception as e:
        st.error(f"рдбреЗрдЯрд╛ рд▓рд╛рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛: {e}")
        return []
    return []

#---------------------------------------
# рдбреЗрдЯрд╛ рдХреЛ DataFrame рдореЗрдВ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░реЗрдВ
def prepare_option_df(raw, symbol):
    """Raw JSON рд╕реЗ рдХрдореНрдкреНрд▓реАрдЯ DataFrame рдмрдирд╛рдПрдБ"""
    rows = []
    for d in raw:
        strike = d['strikePrice']
        expiry = d.get('expiryDate', None)
        ce = d.get('CE', {})
        pe = d.get('PE', {})
        row = {
            'strike': strike,
            'expiry': expiry,
            'CE_ltp': ce.get('lastPrice', np.nan),
            'CE_oi': ce.get('openInterest', np.nan),
            'CE_chngOI': ce.get('changeinOpenInterest', np.nan),
            'PE_ltp': pe.get('lastPrice', np.nan),
            'PE_oi': pe.get('openInterest', np.nan),
            'PE_chngOI': pe.get('changeinOpenInterest', np.nan),
        }
        rows.append(row)
    df = pd.DataFrame(rows)
    df.sort_values('strike', inplace=True)
    return df

#---------------------------------------
# Decay Calculations: рдлрд╝рдВрдХреНрд╢рди
def calculate_decay(df_prev, df_now):
    """рджреЛ рдЯрд╛рдЗрдорд╕реНрдЯреИрдореНрдк рдХреЗ DF рдХреЗ рдмреАрдЪ CE/PE рдкреНрд░реАрдорд┐рдпрдо рдбрд┐рдХреЗ рдкреНрд░рддрд┐рд╢рдд рдирд┐рдХрд╛рд▓реЗрдВ"""
    result = []
    keys = ['strike', 'expiry']
    joined = pd.merge(df_prev, df_now, on=keys, suffixes=('_prev', '_now'))
    for idx, row in joined.iterrows():
        ce_decay = np.nan
        pe_decay = np.nan
        if row['CE_ltp_prev'] > 0:
            ce_decay = ((row['CE_ltp_prev'] - row['CE_ltp_now'])/row['CE_ltp_prev'])*100
        if row['PE_ltp_prev'] > 0:
            pe_decay = ((row['PE_ltp_prev'] - row['PE_ltp_now'])/row['PE_ltp_prev'])*100
        result.append({
            'strike': row['strike'],
            'CE_decay': ce_decay,
            'PE_decay': pe_decay,
        })
    decay_df = pd.DataFrame(result)
    return decay_df

#---------------------------------------
# Session State рдореЗрдВ рдкрд┐рдЫрд▓реЗ рдбреЗрдЯрд╛ рдХреЛ рд╕реБрд░рдХреНрд╖рд┐рдд рд░рдЦреЗрдВ
if 'option_prev' not in st.session_state:
    st.session_state['option_prev'] = None

# рдбреЗрдЯрд╛ рдлреЗрдЪ
raw = fetch_option_chain(symbol, expiry_date if expiry_date else None)
if raw:
    df = prepare_option_df(raw, symbol)
else:
    st.error("рдбреЗрдЯрд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВред рдХреГрдкрдпрд╛ рдЗрдВрд╕реНрдЯреЗрдВрдЯ рд░рд┐рдлреНрд░реЗрд╢ рдпрд╛ expiry/date рдмрджрд▓реЗрдВред")
    st.stop()

# Session State рд▓реЙрдЬрд┐рдХ
df_prev = st.session_state['option_prev']
st.session_state['option_prev'] = df.copy()

#---------------------------------------
# ATM рд╕реНрдЯреНрд░рд╛рдЗрдХ рдЪрдпрди (default: nearest to median/underlying)
spot_guess = None
if not df.empty:
    median_strike = df['strike'].median()
    spot_guess = median_strike if median_strike else df['strike'].mean()
else:
    spot_guess = 0

atm_range = st.sidebar.slider("ATM рд╕реНрдЯреНрд░рд╛рдЗрдХ рдХреЗ рдЖрд╕рдкрд╛рд╕ рдХрд┐рддрдиреА рд╕реНрдЯреНрд░рд╛рдЗрдХреНрд╕ рд░рдЦреЗрдВ?", 3, 15, 7)
atm_df = df[(df['strike'] >= spot_guess - atm_range*100) & (df['strike'] <= spot_guess + atm_range*100)].copy()

#---------------------------------------
st.markdown("#### ЁЯУЭ рдСрдкреНрд╢рди рдЪреЗрди (ATM рдХреЗ рдХрд░реАрдм)")
st.dataframe(atm_df[['strike','CE_ltp','PE_ltp','CE_oi','PE_oi']], use_container_width=True)

#---------------------------------------
# Decay рдФрд░ Bias detection - рдХреЗрд╡рд▓ рддрдм рдЬрдм рдкрд┐рдЫрд▓рд╛ рдбреЗрдЯрд╛ рдЙрдкрд▓рдмреНрдз рд╣реЛ
if df_prev is not None:
    decay_df = calculate_decay(df_prev, df)
    avg_ce_decay = decay_df['CE_decay'].mean()
    avg_pe_decay = decay_df['PE_decay'].mean()

    st.markdown("### ЁЯУЙ рдбрд┐рдХреЗ рдкреНрд░рддрд┐рд╢рдд рдХреА рддреБрд▓рдирд╛")
    fig = go.Figure()
    fig.add_trace(go.Bar(
        x=decay_df['strike'],
        y=decay_df['CE_decay'],
        name='CE Decay (%)',
        marker=dict(color='orange')
    ))
    fig.add_trace(go.Bar(
        x=decay_df['strike'],
        y=decay_df['PE_decay'],
        name='PE Decay (%)',
        marker=dict(color='green')
    ))
    fig.update_layout(title='CE vs PE Premium Decay %',
                     barmode='group',
                     xaxis_title="рд╕реНрдЯреНрд░рд╛рдЗрдХ",
                     yaxis_title="рдбрд┐рдХреЗ %")
    st.plotly_chart(fig, use_container_width=True)

    # Bias detection logic
    bias_message = ""
    recommendation = ""
    bias_type = None
    if abs(avg_ce_decay - avg_pe_decay) < decay_threshold:
        bias_message = "рдХреЛрдИ рд╕реНрдкрд╖реНрдЯ рдбрд┐рдХреЗ рдмрд╛рдпрд╕ рдирд╣реАрдВ рд╣реИред рдорд╛рд░реНрдХреЗрдЯ рд╕рд╛рдЗрдбрд╡реЗреЫ рдпрд╛ рд▓реЛ-рд╡реЛрд▓реИрдЯрд┐рд▓рд┐рдЯреА рд╣реИред"
        recommendation = "рдЯреНрд░реЗрдбрд┐рдВрдЧ рд╕реЗ рдмрдЪреЗрдВ рдпрд╛ рдЫреЛрдЯреЗ рд╕реНрдХреИрд▓реНрдкрд┐рдВрдЧ рдЯреНрд░реЗрдб рд▓реЗрдВред"
        bias_type = 'neutral'
    elif avg_ce_decay > avg_pe_decay + decay_threshold:
        bias_message = "CE рдбрд┐рдХреЗ рдмрд╛рдпрд╕ рдПрдХреНрдЯрд┐рд╡ рд╣реИ! рдХреЙрд▓реНрд╕ рдореЗрдВ рдкреНрд░реАрдорд┐рдпрдо рддреЗрдЬрд╝реА рд╕реЗ рдЧрд┐рд░ рд░рд╣рд╛ рд╣реИред"
        recommendation = "ATM/OTM CE рдмреЗрдЪреЗрдВ рдпрд╛ PE рдЦрд░реАрджреЗрдВред SL рдЖрд╡рд╢реНрдпрдХред"
        bias_type = 'ce'
    elif avg_pe_decay > avg_ce_decay + decay_threshold:
        bias_message = "PE рдбрд┐рдХреЗ рдмрд╛рдпрд╕ рдПрдХреНрдЯрд┐рд╡ рд╣реИ! рдкреБрдЯреНрд╕ рдореЗрдВ рдкреНрд░реАрдорд┐рдпрдо рддреЗрдЬрд╝реА рд╕реЗ рдЧрд┐рд░ рд░рд╣рд╛ рд╣реИред"
        recommendation = "ATM/OTM PE рдмреЗрдЪреЗрдВ рдпрд╛ CE рдЦрд░реАрджреЗрдВред SL рдЖрд╡рд╢реНрдпрдХред"
        bias_type = 'pe'
    else:
        bias_message = "рджреЛрдиреЛрдВ рдСрдкреНрд╢рдВрд╕ рдореЗрдВ decay рддреЗрдЬрд╝ рд╣реИред Expiry Straddle Sell рдпрд╛ Market Neutral рд░рдгрдиреАрддрд┐ рдЖрдЬрд╝рдорд╛рдПрдБред"
        recommendation = "ATM CE рдПрд╡рдВ PE рджреЛрдиреЛрдВ рдмреЗрдЪреЗрдВ, рдкрд░рдВрддреБ SL рдЕрд╡рд╢реНрдп рд▓рдЧрд╛рдПрдБред"
        bias_type = 'both'

    # Display Bias
    if bias_type == 'ce':
        st.info(f"ЁЯЯа **{bias_message}**\n\nтЮбя╕П *{recommendation}*")
    elif bias_type == 'pe':
        st.success(f"ЁЯЯв **{bias_message}**\n\nтЮбя╕П *{recommendation}*")
    elif bias_type == 'neutral':
        st.warning(f"ЁЯЯб **{bias_message}**\n\nтЮбя╕П *{recommendation}*")
    else:
        st.error(f"ЁЯФ┤ **{bias_message}**\n\nтЮбя╕П *{recommendation}*")

    # рд╡рд┐рд╕реНрддрд╛рд░рдкреВрд░реНрд╡рдХ рд░рдгрдиреАрддрд┐ table
    strat_table = pd.DataFrame([
        {"Decay Bias": "CE Decay", "рд░рдгрдиреАрддрд┐": "ATM/OTM CE SELL, PE BUY", "рдмрд╛рдЬрд╛рд░ рд╕рдВрдХреЗрдд": "рд╕рд╛рдЗрдбрд╡реЗреЫ рдпрд╛ рдЧрд┐рд░рд╛рд╡рдЯ"},
        {"Decay Bias": "PE Decay", "рд░рдгрдиреАрддрд┐": "ATM/OTM PE SELL, CE BUY", "рдмрд╛рдЬрд╛рд░ рд╕рдВрдХреЗрдд": "рддреЗрдЬреА/рдХрдо рд╡реЛрд▓реИрдЯрд┐рд▓рд┐рдЯреА"},
        {"Decay Bias": "рджреЛрдиреЛрдВ Decay", "рд░рдгрдиреАрддрд┐": "ATM Straddle Sell", "рдмрд╛рдЬрд╛рд░ рд╕рдВрдХреЗрдд": "Expiry/Low Move"},
        {"Decay Bias": "None/Neutral", "рд░рдгрдиреАрддрд┐": "No Trade/рд╕рд╛рд╡рдзрд╛рдиреА", "рдмрд╛рдЬрд╛рд░ рд╕рдВрдХреЗрдд": "рдЕрдирд┐рд╢реНрдЪрд┐рдд"}
    ])
    st.markdown("#### тЪб рд░рдгрдиреАрддрд┐ рд╕рд╛рд░рд╛рдВрд╢ рддрд╛рд▓рд┐рдХрд╛")
    st.table(strat_table)

    # рдЕрддрд┐рд░рд┐рдХреНрдд рдиреЛрдЯреНрд╕
    st.markdown("""
> **рдПрд▓рд░реНрдЯ:**  
> тАв рд╣рд░ рдЯреНрд░реЗрдб рдкрд░ SL рд▓рдЧрд╛рдПрдБред  
> тАв рджреВрд░-рджреВрд░ рдХреЗ рд╕реНрдЯреНрд░рд╛рдЗрдХ рдХрд╛ рдкреНрд░реАрдорд┐рдпрдо рддреЗрдЬреА рд╕реЗ рдЧрд┐рд░ рд╕рдХрддрд╛ рд╣реИ, рдЗрд╕рд▓рд┐рдП рдХрдордкреЛрдЬрд┐рд╢рди рдХрд╛ рдзреНрдпрд╛рди рд░рдЦреЗрдВред  
> тАв PCR, OI Change, рд╡реЙрд▓реНрдпреВрдо рдЖрджрд┐ рдЕрддрд┐рд░рд┐рдХреНрдд рд╕рдВрдХреЗрдд рднреА рджреЗрдЦреЗрдВред  
> тАв рдЯреБрд▓реНрд╕ рдЬреИрд╕реЗ justticks.in, tradingtick.com, рдЖрджрд┐ рд╕реЗ рд▓рд╛рдЗрд╡ PCR/Straddle рдбреЗрдЯрд╛ рдХреЛ рд╕рд╣рд╛рдпрдХ рд╕рдВрдХреЗрддрдХ рдХреА рддрд░рд╣ рджреЗрдЦреЗрдВред
    """)

else:
    st.info("рдкрд╣рд▓рд╛ рдбреЗрдЯрд╛ рд╕реНрдиреИрдкрд╢реЙрдЯ рд▓рд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ... рдХреБрдЫ рд╕реЗрдХрдВрдб рдмрд╛рдж рдбрд┐рдХреЗ рдмрд╛рдпрд╕ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рджрд┐рдЦреЗрдЧрд╛ред")

#---------------------------------------
# Footer
st.markdown("---")
st.markdown(
    """
#### ЁЯЯв рдбреИрд╢рдмреЛрд░реНрдб рд╕реБрд╡рд┐рдзрд╛рдПрдБ:
- рд▓рд╛рдЗрд╡ рдбреЗрдЯрд╛ рдСрдЯреЛ рд░рд┐рдлреНрд░реЗрд╢
- CE/PE Decay Analytics
- рд╣рд┐рдВрджреА рдореЗрдВ рд╕реНрдкрд╖реНрдЯ рдЯреНрд░реЗрдбрд┐рдВрдЧ рд╕реБрдЭрд╛рд╡
- ATM рд╕реНрдЯреНрд░рд╛рдЗрдХреНрд╕ рдХреЗрдВрджреНрд░рд┐рдд рдЙрдкрд▓рдмреНрдзрддрд╛
- Plotly рддрдерд╛ Streamlit рд╡рд┐рдЬрд╝реБрдЕрд▓реНрд╕

тЪая╕П *рдпрд╣ рд╕реБрдЭрд╛рд╡ рдХреЗрд╡рд▓ рд╢реИрдХреНрд╖рд┐рдХ рдкреНрд░рдпреЛрдЬрди рдХреЗ рд▓рд┐рдП рд╣реИред рдЯреНрд░реЗрдбрд┐рдВрдЧ рдЬреЛрдЦрд┐рдо рдХреЗ рдЕрдзреАрди рд╣реИтАФрдХреГрдкрдпрд╛ рд╕реНрд╡рдпрдВ рд╕реЗ рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдВред*
""")

# --------------------------------------
# END OF FILE
